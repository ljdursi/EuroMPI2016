Fast Collision Checking: From Single Robots to Multi-Robot Teams
Joshua Bialkowski, Michael Otte, and Emilio Frazzoli

arXiv:1305.2299v1 [cs.RO] 10 May 2013

Abstract-- We examine three different algorithms that enable the collision certificate method from [1] to handle the case of a centralized multi-robot team. By taking advantage of symmetries in the configuration space of multi-robot teams, our methods can significantly reduce the number of collision checks vs. both [1] and standard collision checking implementations.

robot2 . In the current paper we evaluate three safety certificate methods for multi-robot teams that we call Basic Certificate, Partial Certificate, and Shared Projection. We now describe the individual algorithms. A. Basic Certificate In the Basic Certificate method, certificates are a Cartesian product of D-balls such that there is one D-ball per robot. Consider the case where three robots share a 2-dimensional workspace, see Figure 4. The robots are labeled A, B , and C , respectively, and the subscripts a, b, and c denote a particular robot's projection of a point. If, e.g., the team is located at point p within the combined configuration space, then robot a is located at the projected point pa within its own projection of that space. The certificate stored at p is defined to be [Dmin,a , Dmin,b , Dmin,c ], a list of the radii of its three balls. Point q is certified safe by p if the projections qa , qb and qc are in the projected certificates of pa , pb and pc (blue, red, and orange balls), respectively. In other words, q is certified safe by p if pi - qi < Dmin,i for i  {a, b, c}. Note that Basic Certificate is exactly the method presented in [1] applied to a centralized multi-robot team as is, and does not make any special considerations for symmetries in the space. If any robot is outside its own projection of the certificate, then the entire team is deemed to be outside the

I. I NTRODUCTION Collision checking is a critical bottle-neck in robotic motion planning and a key hurtle to enabling more sophisticated real-time robotic systems [4]. Collision checking for a multirobot team is even more difficult than for a single robot. In the centralized motion planning planning problem, the hypervolume of a configuration space scales exponentially vs. the number of robots in the team and is often correlated with collision checking runtime. In [1] we show that collision checking can be significantly reduced for a single-robot in a metric space by using "safety certificates" that record Dmin , the (normally) collisionchecked distance of a point p to the nearest obstacle, see Figure 1. If a new node q is drawn from within an existing certificate (i.e., p - q < Dmin ), than q cannot possibly be in collision and a new check (for q ) is unnecessary. q then stores a pointer to p so that future nodes drawn near q can also check their status vs. the certificate stored at p. Certificates can be stored within a kd-tree (which is already a common subroutine in motion planning algorithms, e.g., [5], [3], [2]), and so our method can be used without increasing the asymptotic runtime complexity of many common motion planning algorithms. Moreover, the expected proportion of collision checks vs. all samples approaches zero as the number of samples increases to infinity (see [1] for details). We now extend this result to centralized multi-robot teams. II. M ULTI -ROBOT A LGORITHMS Assuming that the members of a multi-robot team share an environment, then the configuration space of the multirobot team is a Cartesian product of the space of each robot1 . R robots each planning in D-dimensions yields a RD-dimensional configuration space. In the centralized multi-robot problem, collision checking vs. the environment can be accomplished piecewise per

p Dmin
(A)

p q
(B) (C) (D)

Fig. 1: Our single-robot collision certificate method from [1]. Collision checked nodes p store "safety certificates" (blue) defined by Dmin the distance to the nearest obstacle (A). Future nodes q within a certificate can forgo collision checking (B). Pointer (red-dotted lines) are maintained to certifying nodes (C). The ratio of collision checks vs. (all) nodes approaches zero in the limit vs. graph size (D).
2 Robot vs. robot collision checking can similarly be reduced to checking one robot vs. another in a local coordinate system. If the team is homogeneous then this is further simplified because all robots can re-use the same two-robot collision checking data-structure, since the robot vs. robot interaction will be identical for any pair of robots. That said, we only address robot vs. environment collision checks in the current work. However, we note that the current work can be applied to a two-robot collision check (and thus by extension the homogeneous team self-collision check) by recasting a robot vs. robot check as a robot vs. environment check, where the second environment simply consists of a single robot.

J. Bialkowski, M. Otte, and E. Frazzoli, Massachusetts Institute of Technology, Cambridge, MA. ottemw@mit.edu 1 If all members of the team do not share an environment, then it may be possible to reduce the problem by dividing it into a set of disjoint sub-problems, one per each set of robots that are common to a particular environment, and such that each robot belongs to only one team.

qa pa A

qb + B

pb +

qc C

pc pa A qa + B pb qc qb + C pc

Fig. 2: Basic Certificate: Certificates are a Cartesian product of balls, one ball per robot. q is certified safe by p if the projections qa , qb and qc are in the projected certificates of pa , pb and pc (blue, red, and orange balls), respectively. qa pa A qb + B qc C pc

pb +

Fig. 4: Shared Projection: all robots collision check in the same D-dimensional projection (far right). Pointers from configuration space node projections to their collision-checking projection counterparts are depicted with blue/magenta/orange dotted lines, respectively. Note that pa certifies qc and pc certifies qb .

Fig. 3: Partial Certificate: If a point is not certified as safe with respect to a subspace projection, then only a partial collision check is required. e.g, qa and qc are within the certificates of pa and pc , respectively, but qb is not within the certificate of pb . Thus, only 1/3 check is required (for qb ).

certificate and a new collision check must be performed. The projected space of each robot must be independently covered with certificates--despite the fact that each robot has to face an identical obstacle configuration. The next two methods are designed to address these limitations. B. Partial Certificate In Partial Certificate each robot performs collision checking in its own projection of the full space (similar to Basic Certificate). However, if a point is not certified as safe with respect to all subspace projection, then only a partial collision check is required vs. the projection(s) that were not individually certified as safe. See Figure 3, when qa and qc are within the certificates of pa and pc , respectively, but qb is not within the certificate of pb , then only 1/3 check is required to determine the safety of qb . The implementation of this method requires that each node stores R certificate pointers (i.e., instead of the single pointer required by basic certificate). Storing one pointer per robot enables a new node to be certified by a combination of different old nodes and/or to calculate its own partial certificates as needed. C. Shared Projection Shared Projection is similar to Partial Certificate except that all robots perform collision checking in the same Ddimensional projection of the full RD-dimensional space, See Figure 4. We anticipate that doing this will cause the latter space to become populated with certificates R times more quickly, and thus require fewer (standard) collision checks. In other words, vs. a single projection of the space, R nodes are checked and/or added during each iteration instead of 1. Therefore, we expect that it will require 1/R iterations to achieve the same amount of certified space vs. Partial Certificate (and Basic Certificate).

The implementation of this method requires an extra Ddimensional kd-tree in the shared projected space; however, the time complexity only increases from O(RD log(N )) to O(RD log(N ) + D log(R)), where D log(R) is a constant. In practice, we find that the runtime of this method can be significantly improved by seeding the second (shared D-dimensional) kd-tree based on the nearest-neighbor as determined by of the first ((RD)-dimensional) kd-tree. For example, when searching the second (shared D-dimensional) kd-tree for the collision status of qa we begin the search at the location of pa instead of at the root of the tree, where p is the point that has (already) been returned by the first ((RD)-dimensional) kd-tree search. III. EXPERIMENTS We now perform a number of experiments evaluating the effectiveness of using Basic Certificate, Partial Certificate, and Shared Projection with RRT and RRT*, and vs. different obstacle checking times and team sizes. The workspace used for all experiments appears in Figure 5, note that robots 1, 2, 3, 4, and 5 are colored blue, red, green, cyan, and magenta, respectively. When an experiment is run with a team size of R then robots numbered 1 - R are used and robots  R + 1 are removed from the workspace. Figures 6 and 7 show the average proportion of points that require a collision check (over 20 trials) for different team sizes (1 to 5 robots) vs. iteration number (1 to 105 ). Note that fractional values are possible for Partial Certificate and Shared Projection when only some of the robots require a check. Figure 6 shows results with RRT, while 7 shows results with RRT*. Figures 8 and 9 show the corresponding runtime-- normalized by the runtime of a standard implementation of RRT or RRT* that does not use any certificate method (averaged over 20 trials), respectively. The top-most subfigure in 8 and 9 show the raw results averaged over 20 trials. In order to evaluate how our certificate method performs as collision checking becomes more difficult, the bottom two sub-figures show what happens when collision checking time is increased by a factor of 102 and 104 , respectively. These graphs are created by recording the cumulative time spent within the standard collision checking call vs. the total runtime, and then increasing the collision checking

10 8 6 4 2 0 -2 -4 -6 -8 -10 -10
checks / nodes Basic Certificate 1 1

RRT*
Partial Certificate 1 Shared Projection Team Size 1 2 3 4 5

0.5

0.5

0.5

0 0 1 2 3 4 5 10 10 10 10 10 10 iterations

0 0 1 2 3 4 5 10 10 10 10 10 10 iterations

0 0 1 2 3 4 5 10 10 10 10 10 10 iterations

Fig. 7: Proportion of nodes requiring a collision check (mean value over 20 trials), lower values are better. The RRT* algorithm is used.

-8

-6

-4

-2

0

2

4

6

8

10

Fig. 5: The randomly generated workspace that is used for all experiments. Robot starting locations and goals appear as circles and crosses, respectively. Note that a particular robot's starting location and goal have the same color. Obstacle appear black and have been randomly generated.
RRT
1 0.8 checks / nodes 0.6 0.4 0.2 0 0 1 2 3 4 5 10 10 10 10 10 10 iterations Basic Certificate 1 0.8 0.6 0.4 0.2 0 0 1 2 3 4 5 10 10 10 10 10 10 iterations Partial Certificate 1 0.8 0.6 0.4 0.2 0 0 1 2 3 4 5 10 10 10 10 10 10 iterations Shared Projection Team Size 1 2 3 4 5

Fig. 6: Proportion of nodes requiring a collision check (mean value over 20 trials), lower values are better. The RRT algorithm is used.

iteration. In practice, this can be dealt with by switching to standard collision checks once the size of the kd-tree makes using certificates (e.g., going back up the kd-tree after a kd-search search) disadvantageous. The advantages of using shared projection last longer as collision checking becomes more difficult--therefore, we expect it to be most useful in the particular scenarios most in need of collision checking efficiency. Our main results can be summarized as follows:  Either Partial Certificate or Shared Projection should be used instead of Basic Certificate.  Shared Projection should be used when the team size is relatively large (e.g., R > 2), and the number of nodes is sufficiently small that the benefits of reduced collision checking outweigh the extra kd-tree overhead (e.g., when collision checking is relatively expensive).  Partial Certificates will provide moderate improvements when team size is small (R  2) and collision checking is relatively inexpensive. R EFERENCES
[1] J. Bialkowski, S. Karaman, M. Otte, and E. Frazzoli. Efficient collision checking in sampling-based motion planning. In Proc. International Workshop on the Algorithmic Foundations of Robotics, 2012. [2] S. Karaman and E. Frazzoli. Sampling-based algorithms for optimal motion planning. Int. Journal of Robotics Research, 30(7):846894, June 2011. [3] L. Kavraki, P. Svestka, J. Latombe, and M. H. Overmars. Probabilistic roadmaps for path planning in high-dimensional configuration spaces. IEEE transactions on Robotics and Automation, January 1996. [4] S. LaValle. Planning Algorithms. Cambridge University Press, 2006. [5] S. LaValle and J. J. Kuffner. Randomized kinodynamic planning. International Journal of Robotics Research, 20(5):378400, 2001.

time by the desired multiple while holding the non-collision checking time constant. This is only an approximation to what might be expected in practice for difficult collision checking scenarios; however, we believe that it provides useful insight into how each method should be expected to perform as collision checking becomes more difficult. IV. R ESULTS AND C ONCLUSIONS With respect to the proportion of collision checks that are avoided, Basic Certificate suffers from a curse of dimensionality that limits its usefulness for team sizes greater than 2 (Figure 6). Shared Projection provides significant runtime reductions for all team sizes and difficulty levels (Figure 8); however, there is eventually a graph size for which using certificates becomes more expensive than a traditional collision check. We note that a similar result was also observed in the single robot version of this work; however, the crossover point was located orders of magnitude latter. We believe that this happens sooner for Shared Projection due to the fact that R nodes must be added to the secondary kd-tree per

RRT
Basic Certificate 2 normalized time 2 Partial Certificate 2 Shared Projection Team Size 1 2 3 4 5 2 normalized time Basic Certificate 2

RRT*
Partial Certificate 2 Shared Projection Team Size 1 2 3 4 5

1

1

1

1

1

1

0 0 1 2 3 4 5 10 10 10 10 10 10 iterations

0 0 1 2 3 4 5 10 10 10 10 10 10 iterations

0 0 1 2 3 4 5 10 10 10 10 10 10 iterations

0 0 1 2 3 4 5 10 10 10 10 10 10 iterations

0 0 1 2 3 4 5 10 10 10 10 10 10 iterations

0 0 1 2 3 4 5 10 10 10 10 10 10 iterations

RRT (Difficulty 102 )
Basic Certificate 2 normalized time 2 Partial Certificate 2 Shared Projection Team Size 1 2 3 4 5 2 normalized time Basic Certificate 2

RRT* (Difficulty 102 )
Partial Certificate 2 Shared Projection Team Size 1 2 3 4 5

1

1

1

1

1

1

0 0 1 2 3 4 5 10 10 10 10 10 10 iterations

0 0 1 2 3 4 5 10 10 10 10 10 10 iterations

0 0 1 2 3 4 5 10 10 10 10 10 10 iterations

0 0 1 2 3 4 5 10 10 10 10 10 10 iterations

0 0 1 2 3 4 5 10 10 10 10 10 10 iterations

0 0 1 2 3 4 5 10 10 10 10 10 10 iterations

RRT (Difficulty 104 )
Basic Certificate 2 normalized time 2 Partial Certificate 2 Shared Projection Team Size 1 2 3 4 5 2 normalized time Basic Certificate 2

RRT* (Difficulty 104 )
Partial Certificate 2 Shared Projection Team Size 1 2 3 4 5

1

1

1

1

1

1

0 0 1 2 3 4 5 10 10 10 10 10 10 iterations

0 0 1 2 3 4 5 10 10 10 10 10 10 iterations

0 0 1 2 3 4 5 10 10 10 10 10 10 iterations

0 0 1 2 3 4 5 10 10 10 10 10 10 iterations

0 0 1 2 3 4 5 10 10 10 10 10 10 iterations

0 0 1 2 3 4 5 10 10 10 10 10 10 iterations

Fig. 8: Relative runtime of certificate methods vs. normal collision checking (mean over 20 trials), points below the dotted line are desired. The RRT algorithm is used. Top to Bottom depict the RRT algorithm with collision difficulty levels of 1 (raw data), 102 , and 104 , respectively.

Fig. 9: Relative runtime of certificate methods vs. normal collision checking (mean over 20 trials), points below the dotted line are desired. The RRT* algorithm is used. Top to Bottom depict the RRT* algorithm with collision difficulty levels of 1 (raw data), 102 , and 104 , respectively.

